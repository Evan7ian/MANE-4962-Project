{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ec022aee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('TEDSA_PUF_2020.csv')\n",
    "\n",
    "data = data.dropna()  # Drop missing values\n",
    "data_filtered = data[['AGE','GENDER','RACE','MARSTAT','EMPLOY','EDUC',\"SUB1\",'NOPRIOR','FREQ1','PSYPROB']]\n",
    "df_sample = data_filtered.sample(n=8500, random_state=42)\n",
    "\n",
    "# Handle missing values\n",
    "# data.replace(to_replace=r'M', value=np.nan, regex=True)\n",
    "# data.fillna(0, inplace=True)\n",
    "\n",
    "# Convert categorical variables to numerical variables\n",
    "# label_encoder = LabelEncoder()\n",
    "# data['SERVICES'] = label_encoder.fit_transform(data['SERVICES'])\n",
    "\n",
    "X = df_sample.drop('PSYPROB', axis=1)  # Remove target variable from input features\n",
    "y = df_sample['PSYPROB']  # Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e4b02d7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "14eada82",
   "metadata": {},
   "outputs": [],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4dd371a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "\n",
    "# Feature scaling\n",
    "scaler = StandardScaler()\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "# Feature selection\n",
    "selector = SelectKBest(score_func=f_classif, k=2)\n",
    "X_selected = selector.fit_transform(X, y)\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d386dd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.scatter(X[:,0],X[:,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "06114fb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "\n",
    "# Train the model\n",
    "clf = RandomForestClassifier(random_state=42)\n",
    "params = {'n_estimators': [100],\n",
    "          'max_depth': [10],\n",
    "          'min_samples_split': [5]}\n",
    "grid_search = GridSearchCV(clf, param_grid=params, cv=5, scoring='accuracy', n_jobs=-1)\n",
    "grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f8019524",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report, accuracy_score, roc_auc_score\n",
    "\n",
    "# Evaluate the model\n",
    "y_pred = grid_search.predict(X_test)\n",
    "print(\"Accuracy: \", accuracy_score(y_test, y_pred))\n",
    "# print(\"ROC-AUC: \", roc_auc_score(y_test, y_pred))\n",
    "print(\"Classification Report: \\n\", classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "751984e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('TEDSA_PUF_2020.csv')\n",
    "\n",
    "data = data.dropna()  # Drop missing values\n",
    "data_filtered = data[['AGE','GENDER','RACE','MARSTAT','EMPLOY','EDUC',\"SUB1\",'NOPRIOR','FREQ1','DSMCRIT']]\n",
    "df_sample = data_filtered.sample(n=8500, random_state=42)\n",
    "\n",
    "# Handle missing values\n",
    "# data.replace(to_replace=r'M', value=np.nan, regex=True)\n",
    "# data.fillna(0, inplace=True)\n",
    "\n",
    "# Convert categorical variables to numerical variables\n",
    "# label_encoder = LabelEncoder()\n",
    "# data['SERVICES'] = label_encoder.fit_transform(data['SERVICES'])\n",
    "\n",
    "X = df_sample.drop('DSMCRIT', axis=1)  # Remove target variable from input features\n",
    "y = df_sample['DSMCRIT']  # Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ff718f49",
   "metadata": {},
   "outputs": [],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6d812002",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "\n",
    "# Feature scaling\n",
    "scaler = StandardScaler()\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "# Feature selection\n",
    "selector = SelectKBest(score_func=f_classif, k=2)\n",
    "X_selected = selector.fit_transform(X, y)\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4d57043e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "\n",
    "# Train the model\n",
    "clf = RandomForestClassifier(random_state=42)\n",
    "params = {'n_estimators': [100],\n",
    "          'max_depth': [10],\n",
    "          'min_samples_split': [5]}\n",
    "grid_search = GridSearchCV(clf, param_grid=params, cv=5, scoring='accuracy', n_jobs=-1)\n",
    "grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b6849cea",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report, accuracy_score, roc_auc_score\n",
    "\n",
    "# Evaluate the model\n",
    "y_pred = grid_search.predict(X_test)\n",
    "print(\"Accuracy: \", accuracy_score(y_test, y_pred))\n",
    "# print(\"ROC-AUC: \", roc_auc_score(y_test, y_pred))\n",
    "print(\"Classification Report: \\n\", classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "55bc6f4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('TEDSA_PUF_2020.csv')\n",
    "\n",
    "data = data.dropna()  # Drop missing values\n",
    "data_filtered = data[['AGE','GENDER','RACE','MARSTAT','EMPLOY','EDUC',\"SUB1\",'NOPRIOR','FREQ1','DSMCRIT']]\n",
    "df_sample = data_filtered.sample(n=10000, random_state=42)\n",
    "\n",
    "# Handle missing values\n",
    "# data.replace(to_replace=r'M', value=np.nan, regex=True)\n",
    "# data.fillna(0, inplace=True)\n",
    "\n",
    "# Convert categorical variables to numerical variables\n",
    "# label_encoder = LabelEncoder()\n",
    "# data['SERVICES'] = label_encoder.fit_transform(data['SERVICES'])\n",
    "\n",
    "X = df_sample.drop('DSMCRIT', axis=1)  # Remove target variable from input features\n",
    "y = df_sample['DSMCRIT']  # Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "332f8f7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c263a9fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "\n",
    "# Feature scaling\n",
    "scaler = StandardScaler()\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "# Feature selection\n",
    "selector = SelectKBest(score_func=f_classif, k=2)\n",
    "X_selected = selector.fit_transform(X, y)\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.3, random_state=42)"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
